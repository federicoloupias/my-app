{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorsActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCES, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types'; //Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Setup config / headers and token\n\nexport const tokenConfig = getState => {\n  // Gete token from localStorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/loupi/Documents/GitHub/my-app/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCES","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,YADJ,QAEO,iBAFP;AAGA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,aANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASO,kBATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAElD;AACAD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEX;AADD,GAAD,CAAR;AAIAF,EAAAA,KAAK,CAACc,GAAN,CAAU,gBAAV,EAA4BC,WAAW,CAACH,QAAD,CAAvC,EACKI,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEV,WADY;AAElBe,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAVL;AAYH,CAnBM,C,CAqBP;;AACA,OAAO,MAAMW,WAAW,GAAGH,QAAQ,IAAI;AACnC;AACA,QAAMY,KAAK,GAAGZ,QAAQ,GAAGa,IAAX,CAAgBD,KAA9B,CAFmC,CAInC;;AACA,QAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAIH,KAAJ,EAAW;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AAED,SAAOE,MAAP;AACH,CAjBM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    returnErrors\r\n} from './errorsActions'\r\nimport {\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCES,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n} from '../actions/types';\r\n\r\n//Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n\r\n    // User loading\r\n    dispatch({\r\n        type: USER_LOADING\r\n    });\r\n\r\n    axios.get('/api/auth/user', tokenConfig(getState))\r\n        .then(res => dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        }))\r\n        .catch(err => {\r\n            dispatch(returnErrors(err.response.data, err.response.status));\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n        });\r\n\r\n}\r\n\r\n// Setup config / headers and token\r\nexport const tokenConfig = getState => {\r\n    // Gete token from localStorage\r\n    const token = getState().auth.token;\r\n\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            \"Content-type\": \"application/json\"\r\n        }\r\n    }\r\n\r\n    // If token, add to headers\r\n    if (token) {\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    return config;\r\n}"]},"metadata":{},"sourceType":"module"}