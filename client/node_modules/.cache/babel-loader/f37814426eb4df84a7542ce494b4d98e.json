{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorsActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCES, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types'; //Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password,\n  firstName,\n  lastName,\n  country\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    firstName,\n    lastName,\n    country\n  });\n  axios.post('http://localhost:8080/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // LogOut User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCES\n  };\n}; //LogIn User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('http://localhost:8080/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Setup config / headers and token\n\nexport const tokenConfig = getState => {\n  // Gete token from localStorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/federicoloupias/Documents/GitHub/my-app/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCES","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","firstName","lastName","country","config","headers","body","JSON","stringify","post","logout","login","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    returnErrors\n} from './errorsActions'\nimport {\n    USER_LOADING,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCES,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from '../actions/types';\n\n//Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n\n    // User loading\n    dispatch({\n        type: USER_LOADING\n    });\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n\n}\n\n// Register User\nexport const register = ({ name, email, password, firstName, lastName, country }) => dispatch => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n    // Request body\n\n    const body = JSON.stringify({ name, email, password, firstName, lastName, country })\n\n    axios.post ('http://localhost:8080/api/users', body, config)\n    .then(res => dispatch ({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    });\n}\n\n\n// LogOut User\n\nexport const logout = () => {\n    return{\n        type: LOGOUT_SUCCES\n    }\n}\n\n\n//LogIn User\n\nexport const login = ({ email, password }) => dispatch => {\n    //Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n    // Request body\n\n    const body = JSON.stringify({ email, password })\n\n    axios.post ('http://localhost:8080/api/auth', body, config)\n    .then(res => dispatch ({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n    }))\n    .catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    });\n}\n\n\n// Setup config / headers and token\nexport const tokenConfig = getState => {\n    // Gete token from localStorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}